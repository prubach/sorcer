/*
 * Copyright to the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Build a distribution  */

apply plugin: 'base'
apply plugin: 'maven'
apply plugin: 'maven-publish'

//version = sorcerVersion
group = "org.sorcersoft.sorcer"

/* Declare a custom configuration for distribution only dependencies */
configurations {
    distribution
    distribution.extendsFrom(runtime)
}

dependencies {
    ["mahalo", "outrigger", "reggie"].each { riverDep ->
        if(riverDep!="outrigger")
            distribution "org.apache.river:${riverDep}:$riverVersion"
        distribution "org.apache.river:${riverDep}-dl:$riverVersion"
    }
    distribution "net.jini.lookup:serviceui:$riverVersion"
    ["blitz", "blitz-dl", "blitzui"].each { blitz ->
        distribution "org.dancres:${blitz}:$blitzVersion"
    }
    distribution "org.rioproject:distribution:${rioVersion}@zip"
}

ext {
    distDir = "${project.buildDir.path}/sorcer"
}

task installer(dependsOn: ["distribution"]) {
    description = "Creates a distribution and an IzPack based installer."
    inputs.dir("${project.buildDir.path}/sorcer-${version}" as File)
    outputs.files "${project.buildDir.path}/sorcer-${version}-installer.jar"

    doLast {
        ant.taskdef(name: 'izpack',
                    classpath: fileTree(dir: file("${rootProject.projectDir.path}/distribution/izpack/lib"), includes: ['*.jar']).asPath,
                    classname: 'com.izforge.izpack.ant.IzPackTask')

        ant.property(name: 'app.group',   value: 'SORCER')
        ant.property(name: 'app.name',    value: 'SORCER')
        ant.property(name: 'app.title',   value: 'SORCER')
        ant.property(name: 'app.version', value: version)
        ant.property(name: 'app.subpath', value: "SORCER-$version")

        ant.izpack(basedir: "${rootProject.projectDir.path}/distribution/izpack",
                   output: "${project.buildDir.path}/sorcer-${version}-installer.jar",
                   compression: 'deflate',
                   compressionlevel: '9') {
            config(file("${rootProject.projectDir.path}/distribution/izpack/installer.xml").text)
        }
    }
}
installer.outputs.upToDateWhen { false }

def filter(project) {
    def exclusions = [/*"sos-shell", */"examples", "sorcer-int-tests"]
    boolean include = true
    for(String exclude : exclusions) {
        if(project.contains(exclude))  {
            include = false
            break
        }
    }
    include
}

/*
 * This will gather up and organize subproject dependencies, and resolve distribution dependencies
 */
task gatherDeps() {
    description = "Gather up and organize distribution dependencies"

    doLast {
        File dir = file("${distDir}-${version}")
        if (dir.exists()) {
            delete dir
            println "Removed distribution $dir"
        }
        println "Creating distribution $dir"
        rootProject.subprojects.each { project ->
            boolean include = filter(project.path)
            if(include) {
                println "Processing ${project.path}"
                ["jsk, start, service-ui"  : "lib/river",
                 "blitz, lockmgr"          : "lib/blitz",
                 "je, xerces, xml"         : "lib/common",
                 "groovy"                  : "lib/common/groovy",
                 "junit"                   : "lib/common/buildsupport"].each {
                    prefix, dest ->
                    copy {
                        from filterDeps(project, prefix)
                        into "$distDir-${version}/$dest"
                    }
                }
            }
        }

        /* Copy over distribution dependencies */
        project.configurations['distribution'].files.each { file ->
            String dest
            if(file.path.endsWith("distribution-${rioVersion}.zip")) {
                copy {
                    from(zipTree(file)) {
                        exclude '**/examples.zip'
                        exclude '**/docs/*'
                        exclude '**/index.html'
                    }
                    //into "$distDir-${version}"
                    into "$distDir-${version}/"
                }
                File docs = new File("$distDir-${version}/rio-${rioVersion}/docs")
                if(docs.exists())
                    docs.deleteDir()
            } else {
                if (file.path.contains("jini") || file.path.contains("river"))
                    dest = "lib/river"
                else
                    dest = "lib/blitz"
                copy {
                    from file
                    into "$distDir-${version}/$dest"
                }
            }
        }
    }
}

def filterDeps(project, prefix) {
    project.configurations.runtime.filter {
        String[] parts = prefix.split(",")
        for (String part : parts) {
            if (it.name.startsWith(part.trim())) {
                return true
            }
        }
        false
    }
}

task createDistribution(dependsOn: [":tools:sos-boot:install",
                              ":tools:sorcer-lib:install",
                              ":sos:sorcer-ui:install",
                              ":tools:sorcer-junit:install",
                              ":sos:sos-api:install",
                              ":tools:browser:install",
                              ":tools:sos-webster:install",
                              ":tools:sos-shell:install",
                              gatherDeps]) {
    description 'Creates a Sorcer distribution'
    doLast {
        File sorcerLibDir = file("$distDir-${version}/lib/sorcer/lib")
        File sorcerDlDir = file("$distDir-${version}/lib/sorcer/lib-dl")
        File sorcerExtDir = file("$distDir-${version}/lib/sorcer/lib-ext")

        rootProject.subprojects.each { project ->
            boolean include = filter(project.path)
            if(include) {
                println "Processing ${project.path}"
                project.tasks.withType(Jar).each { jar ->
                    File target
                    if(!jar.archiveName.contains("sources")) {
                        if (jar.archiveName.indexOf('dl') > 0 ||
                            jar.archiveName.indexOf('ui') > 0) {
                            target = sorcerDlDir
                        } else if (jar.archiveName.startsWith('ssb-') || jar.archiveName.startsWith('webster-')) {
                            target = sorcerExtDir
                        } else {
                            target = sorcerLibDir
                        }
                        if (file(jar.archivePath).exists()) {
                            copy {
                                from jar.archivePath
                                into target
                            }
                        } else {
                            println "Archive does not exist ${jar.archivePath}"
                        }
                    }
                }
            }
        }

        copy {
            from("${project.rootProject.projectDir}") {
                include "LICENSE.txt"
                include "configs/**"
                include "configs/**/**"
                include "bin/**"
                include "netlets/**"

                include "examples/**/**"
                include "examples/**"

            }
            into "${distDir}-${version}"
            rename "standalone.sorcer.env", "sorcer.env"
        }

        copy {
            from("${project.rootProject.projectDir}") {
                include "bin/webster/bin/webster**"
                include "bin/webster/configs/websterConfig.groovy"
                include "bin/shell/bin/*"
                fileMode = 0755
            }
            into "${distDir}-${version}"
        }

        /* Overlay Rio customizations onto Rio distribution */
        copy {
            //from("${projectDir.path}/resources/rio")
            from("${projectDir.path}/sorcer-rio/sorcer-rio-config/src/main/resources/")
            into "${distDir}-${version}/rio-${rioVersion}"
            //into "${distDir}-${version}/lib/rio"
        }

        /* Move the SLF4J logback jars out of the way and slide SLF4J JUL logging support in */
        File rioLoggingLib = file("${distDir}-${version}/rio-${rioVersion}/lib/logging")
        for(File jar : rioLoggingLib.listFiles()) {
            if(jar.name.startsWith("logback") && !jar.isDirectory())
                jar.delete()
        }
        copy {
            from(file("${rioLoggingLib.path}/jul")) {
                include "**/slf4j-jdk14*.jar"
            }
            into rioLoggingLib
        }
        /* Create a versions.properties file based on the versions in this build */
        /*Properties versionProps = new Properties()
        File versionPropsFile = file("${distDir}-${version}/configs/versions.properties")
        versionProps.setProperty("river.version", riverVersion)
        versionProps.setProperty("rio.version", rioVersion)
        versionProps.setProperty("sorcer.version", version.toString())
        versionProps.setProperty("blitz.version", blitzVersion)
        versionProps.setProperty("je.version", jeVersion)
        versionProps.setProperty("groovy.version", groovyVersion)
        versionProps.setProperty("slf4j.version", slf4jVersion)
        versionProps.store(versionPropsFile.newWriter(), null)*/
    }
}

task distribution(type: Zip, dependsOn: [createDistribution]) {
    description 'Creates a Sorcer distribution archive'
    doFirst {
        println "Zipping distribution sorcer-${version} -> sorcer-${version}.zip"
    }
    //compression = Compression.GZIP // for Tar type
    baseName = "sorcer"
    destinationDir = project.buildDir
    from("${project.buildDir.path}/sorcer-${version}") {
        exclude("**/bin/webster/bin/*")
    }
    from("${project.buildDir.path}/sorcer-${version}") {
        include("**/bin/webster/bin/*")
        fileMode = 0755
    }
    into "sorcer-${version}"
    doLast {
        println "Complete"
    }
}

def sorcerDistribution = file("build/sorcer-${version}.zip")
artifacts {
    archives file: sorcerDistribution, name: 'distribution', type: 'zip', builtBy: distribution
}

publishing {
    publications {
        distribution(MavenPublication) {
            artifact sorcerDistribution
        }
    }
    repositories {
        maven { url "http://$enclaveRepo" }
    }
}
