/*
 * Copyright to the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Build a distribution  */

apply plugin: 'base'
apply plugin: 'maven'
apply plugin: 'maven-publish'

//version = sorcerVersion
group = "org.sorcersoft.sorcer"

/* Declare a custom configuration for distribution only dependencies */
configurations {
    distribution
    distribution.extendsFrom(runtime)
}

dependencies {
    ["mahalo", "outrigger", "reggie"].each { riverDep ->
        if(riverDep!="outrigger")
            distribution "org.apache.river:${riverDep}:$riverVersion"
        distribution "org.apache.river:${riverDep}-dl:$riverVersion"
    }
    distribution "net.jini.lookup:serviceui:$riverVersion"
    //["blitz", "blitz-dl", "blitzui"].each { blitz ->
     //   distribution "org.dancres:${blitz}:$blitzVersion"
   // }
    distribution "org.rioproject:distribution:${rioVersion}@zip"
}

ext {
    distDir = "${project.buildDir.path}/sorcer"
}

task installer(dependsOn: ["distribution"]) {
    description = "Creates a distribution and an IzPack based installer."
    inputs.dir("${project.buildDir.path}/sorcer-${version}" as File)
    outputs.files "${project.buildDir.path}/sorcer-${version}-installer.jar"

    doLast {
        ant.taskdef(name: 'izpack',
                    classpath: fileTree(dir: file("${rootProject.projectDir.path}/distribution/izpack/lib"), includes: ['*.jar']).asPath,
                    classname: 'com.izforge.izpack.ant.IzPackTask')

        ant.property(name: 'app.group',   value: 'SORCER')
        ant.property(name: 'app.name',    value: 'SORCER')
        ant.property(name: 'app.title',   value: 'SORCER')
        ant.property(name: 'app.version', value: version)
        ant.property(name: 'app.subpath', value: "SORCER-$version")

        ant.izpack(basedir: "${rootProject.projectDir.path}/distribution/izpack",
                   output: "${project.buildDir.path}/sorcer-${version}-installer.jar",
                   compression: 'deflate',
                   compressionlevel: '9') {
            config(file("${rootProject.projectDir.path}/distribution/izpack/installer.xml").text)
        }
    }
}
installer.outputs.upToDateWhen { false }

def filter(project) {
    def exclusions = [/*"sos-shell", */"examples", "sorcer-int-tests"]
    boolean include = true
    for(String exclude : exclusions) {
        if(project.contains(exclude))  {
            include = false
            break
        }
    }
    include
}

/*
 * This will gather up and organize subproject dependencies, and resolve distribution dependencies
 */
task gatherDeps() {
    description = "Gather up and organize distribution dependencies"

    doLast {
        File dir = file("${distDir}-${version}")
        if (dir.exists()) {
            delete dir
            println "Removed distribution $dir"
        }
        println "Creating distribution $dir"
        rootProject.subprojects.each { project ->
            boolean include = filter(project.path)
            if(include) {
                println "Processing ${project.path}"
                ["jsk, start, service-ui"  : "lib/river",
                 "blitz, lockmgr"          : "lib/blitz",
                 "groovy, slf4j, je, xerces, xml, xml-apis, common-io, commons-collections, commons-compress, plexus, commons-lang3, commons-io, commons-cli, guice, javax.inject, aopalliance, asm, cglib, guava, sigar" : "lib/common",
                 "junit"                   : "lib/common/buildsupport"].each {
                    prefix, dest ->
                    copy {
                        from filterDeps(project, prefix, dest)
                        into "$distDir-${version}/$dest"
                    }
                }
            }
        }

        /* Copy over distribution dependencies */
        project.configurations['distribution'].files.each { file ->
            String dest
            if(file.path.endsWith("distribution-${rioVersion}.zip")) {
                copy {
                    from(zipTree(file)) {
                        exclude '**/examples.zip'
                        exclude '**/docs/*'
                        exclude '**/index.html'
                    }
                    //into "$distDir-${version}"
                    into "$distDir-${version}/"
                }
                File docs = new File("$distDir-${version}/rio-${rioVersion}/docs")
                if(docs.exists())
                    docs.deleteDir()
            } else {
                if (file.path.contains("jini") || file.path.contains("river"))
                    dest = "lib/river"
                else
                    dest = "lib/blitz"
                copy {
                    from file
                    into "$distDir-${version}/$dest"
                }
            }
        }
    }
}

def filterDeps(project, prefix, dest) {
    //println "Filtering runtime for $project and $prefix "
    project.configurations.runtime.filter {
        String[] parts = prefix.split(",")
        for (String part : parts) {
            if (it.name.startsWith(part.trim())) {
                //println "Found: $it in $part"
                if (!file("$distDir-${version}/$dest/$it.name").exists())
                    return true
                else
                    return false
            }
        }
        false
    }
}

task grCacheToM2(type: Exec) {
    description = 'Copy jars from gradle cache to M2'
    def args = []
    if(System.properties['os.name'].contains("Windows")) {
        args << "cmd.exe"
        args << "/C"
    }
    args << "${file("${project.buildDir.path}").path}/../../bin/CacheToM2.groovy"
    commandLine args
}

task createDistribution(dependsOn: [grCacheToM2, ":tools:sos-boot:install",
                              ":tools:sorcer-lib:install",
                              ":sos:sorcer-ui:install",
                              ":tools:sorcer-junit:install",
                              ":sos:sos-api:install",
                              ":tools:browser:install",
                              ":tools:sos-webster:install",
                              ":tools:sos-shell:install",
                              ":tools:sorcer-installer:install",
                              gatherDeps]) {
    description 'Creates a Sorcer distribution'
    doLast {
        File sorcerLibDir = file("$distDir-${version}/lib/sorcer/lib")
        File sorcerDlDir = file("$distDir-${version}/lib/sorcer/lib-dl")
        File sorcerExtDir = file("$distDir-${version}/lib/sorcer/lib-ext")

        rootProject.subprojects.each { project ->
            boolean include = filter(project.path)
            if(include) {
                println "Processing ${project.path}"
                project.tasks.withType(Jar).each { jar ->
                    File target
                    if(!jar.archiveName.contains("sources")) {
                        if (jar.archiveName.indexOf('dl') > 0 ||
                            jar.archiveName.indexOf('ui') > 0) {
                            target = sorcerDlDir
                        } else if (jar.archiveName.startsWith('browser-') || jar.archiveName.startsWith('webster-')) {
                            target = sorcerExtDir
                        } else {
                            target = sorcerLibDir
                        }
                        if (file(jar.archivePath).exists()) {
                            copy {
                                from jar.archivePath
                                into target
                            }
                        } else {
                            println "Archive does not exist ${jar.archivePath}"
                        }
                    }
                }
            }
        }

        copy {
            from("${project.rootProject.projectDir}") {
                include "LICENSE.txt"
                include "configs/**"
                include "configs/**/**"
                include "bin/**"
                include "netlets/**"

                include "examples/**/**"
                include "examples/**"

            }
            into "${distDir}-${version}"
            rename "standalone.sorcer.env", "sorcer.env"
        }

        copy {
            from("${project.rootProject.projectDir}") {
                include "bin/webster/bin/webster**"
                include "bin/webster/configs/websterConfig.groovy"
                include "bin/shell/bin/*"
                fileMode = 0755
            }
            into "${distDir}-${version}"
        }

        /* Overlay Rio customizations onto Rio distribution */
        println "Overlaying Rio platform from: ${projectDir.path}/sorcer-rio/sorcer-rio-config/src/main/resources/config/platform"
        copy {
            from("${projectDir.path}/../sorcer-rio/sorcer-rio-config/src/main/resources/config/platform")
            into "${distDir}-${version}/rio-${rioVersion}/config/platform"
        }

        /* Move the SLF4J logback jars out of the way and slide SLF4J JUL logging support in */
        File rioLoggingLib = file("${distDir}-${version}/rio-${rioVersion}/lib/logging")
        for(File jar : rioLoggingLib.listFiles()) {
            //if(jar.name.startsWith("logback") && !jar.isDirectory())
            //    jar.delete()
        }
        copy {
            from(file("${rioLoggingLib.path}/jul")) {
                include "**/slf4j-jdk14*.jar"
            }
            into rioLoggingLib
        }
        /* Create a versions.properties file based on the versions in this build */
        /*Properties versionProps = new Properties()
        File versionPropsFile = file("${distDir}-${version}/configs/versions.properties")
        versionProps.setProperty("river.version", riverVersion)
        versionProps.setProperty("rio.version", rioVersion)
        versionProps.setProperty("sorcer.version", version.toString())
        versionProps.setProperty("blitz.version", blitzVersion)
        versionProps.setProperty("je.version", jeVersion)
        versionProps.setProperty("groovy.version", groovyVersion)
        versionProps.setProperty("slf4j.version", slf4jVersion)
        versionProps.store(versionPropsFile.newWriter(), null)*/

        copy {
            from("${projectDir.path}/../deploy")
            into "${distDir}-${version}/deploy"
        }


        def homePath = System.properties['user.home']
        copy {
            from(file("${homePath}/.m2/repository/")) {
                include "org/apache/river/fiddler/${riverVersion}/fiddler-${riverVersion}.pom"
                include "org/apache/river/fiddler-dl/${riverVersion}/fiddler-dl-${riverVersion}.pom"
                include "net/jini/jsk-dl/${riverVersion}/jsk-dl-${riverVersion}.pom"
                include "net/jini/jsk-lib/${riverVersion}/jsk-lib-${riverVersion}.pom"
                include "net/jini/jsk-platform/${riverVersion}/jsk-platform-${riverVersion}.pom"
                include "net/jini/jsk-resources/${riverVersion}/jsk-resources-${riverVersion}.pom"
                include "org/apache/river/mahalo/${riverVersion}/mahalo-${riverVersion}.pom"
                include "org/apache/river/mahalo-dl/${riverVersion}/mahalo-dl-${riverVersion}.pom"
                include "org/apache/river/mercury/${riverVersion}/mercury-${riverVersion}.pom"
                include "org/apache/river/mercury-dl/${riverVersion}/mercury-dl-${riverVersion}.pom"
                include "org/apache/river/norm/${riverVersion}/norm-${riverVersion}.pom"
                include "org/apache/river/norm-dl/${riverVersion}/norm-dl-${riverVersion}.pom"
                include "org/apache/river/outrigger/${riverVersion}/outrigger-${riverVersion}.pom"
                include "org/apache/river/outrigger-dl/${riverVersion}/outrigger-dl-${riverVersion}.pom"
                include "org/apache/river/reggie/${riverVersion}/reggie-${riverVersion}.pom"
                include "org/apache/river/reggie-dl/${riverVersion}/reggie-dl-${riverVersion}.pom"
                include "net/jini/lookup/serviceui/${riverVersion}/serviceui-${riverVersion}.pom"
                include "org/apache/river/start/${riverVersion}/start-${riverVersion}.pom"
                include "org/sorcersoft/blitz/main/${v_blitz}/main-${v_blitz}.pom"
                include "org/sorcersoft/lockmgr/lockmgr/${v_lockmgr}/lockmgr-${v_lockmgr}.pom"
                include "org/rioproject/main/${rioVersion}/main-${rioVersion}.pom"
                include "org/apache/commons/commons-parent/5/commons-parent-5.pom"
                include "org/apache/commons/commons-parent/32/commons-parent-32.pom"
                //include "org/apache/maven/maven/${v.maven}/maven-${v.maven}.pom"
                //include "org/apache/maven/maven-parent/23/maven-parent-23.pom"
                include "org/codehaus/plexus/plexus/3.3/plexus-3.3.pom"
                include "org/apache/ant/ant/1.9.3/ant-1.9.3.pom"
                include "org/apache/ant/ant-parent/1.9.3/ant-parent-1.9.3.pom"
                include "org/apache/ant/ant-launcher/1.9.3/ant-launcher-1.9.3.pom"
                include "org/slf4j/slf4j-parent/${slf4jVersion}/slf4j-parent-${slf4jVersion}.pom"
                //include "org/sorcersoft/sigar/sigar/1.6.4-3/sigar-1.6.4-3.pom"
                include "org/sorcersoft/sigar/sigar-parent/1.6.4-3/sigar-parent-1.6.4-3.pom"
                include "com/apple/AppleJavaExtensions/1.4/AppleJavaExtensions-1.4.pom"
                include "classworlds/classworlds/1.1-alpha-2/classworlds-1.1-alpha-2.pom"
                include "ant-contrib/ant-contrib/1.0b3/ant-contrib-1.0b3.pom"
                include "nekohtml/xercesMinimal/1.9.6.2/xercesMinimal-1.9.6.2.pom"
                include "aopalliance/aopalliance/1.0/aopalliance-1.0.pom"
                include "org/apache/apache/4/apache-4.pom"
                include "org/codehaus/groovy/groovy-all/${groovyVersion}/groovy-all-${groovyVersion}.pom"
                include "org/eclipse/jdt/core/compiler/ecj/3.5.1/ecj-3.5.1.pom"
                include "org/codehaus/janino/janino/2.5.16/janino-2.5.16.pom"
                include "com/google/guava/guava-parent/${v_guava}/guava-parent-${v_guava}.pom"
                include "org/sonatype/oss/oss-parent/7/oss-parent-7.pom"
                include "junit/junit/${junitVersion}/junit-${junitVersion}.pom"
                include "org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.pom"
                include "org/hamcrest/hamcrest-parent/1.3/hamcrest-parent-1.3.pom"
                include "ch/qos/logback/logback-parent/1.0.13/logback-parent-1.0.13.pom"
                include "com/google/inject/extensions/guice-multibindings/4.0-beta4/guice-multibindings-4.0-beta4.pom"
                include "com/google/inject/guice/4.0-beta4/guice-4.0-beta4.pom"
                include "com/google/inject/guice-parent/4.0-beta4/guice-parent-4.0-beta4.pom"
                include "com/google/inject/extensions/extensions-parent/4.0-beta4/extensions-parent-4.0-beta4.pom"
                include "com/google/google/5/google-5.pom"
                include "asm/asm/3.3.1/asm-3.3.1.pom"
                include "xerces/xercesImpl/2.6.2/xercesImpl-2.6.2.pom"
                include "xerces/xercesImpl/2.6.2/xercesImpl-2.6.2.pom"
                include "com/sleepycat/je/4.0.92/je-4.0.92.pom"
            }
            into "${project.buildDir.path}/tmp/configs/poms"
            eachFile {details ->
                def targetPath = details.getSourceName()
                details.path = targetPath
            }
        }
        copy {
            from(file("${project.buildDir.path}/tmp/configs/poms")) {
                include "*.pom"
            }
            into "${distDir}-${version}/configs/poms"
        }
        copy {
            from(file("src/main/configs/poms")) {
                include "*.pom"
            }
            into "${distDir}-${version}/configs/poms"
        }
        //   Libs necessary for R-java integration - java.endorsed.dir should point to this directory
        copy {
            from(file("${sorcerDistHome}")) {
                include "rio-${rioVersion}/lib/rio-platform*"
                include "rio-${rioVersion}/lib/resolver/resolver-aether*"
                include "lib/common/slf4j-simple*"
                include "lib/sorcer/lib/sorcer-resolving-loader*"
            }
            into "${project.buildDir.path}/tmp/lib/rjava-endorsed"
            eachFile {details ->
                def targetPath = details.getSourceName()
                details.path = targetPath
            }
        }
        copy {
            from(file("${project.buildDir.path}/tmp/lib/rjava-endorsed")) {
                include "*.jar"
            }
            into "${distDir}-${version}/lib/rjava-endorsed"
        }

    }
}

task distribution(type: Zip, dependsOn: [createDistribution]) {
    description 'Creates a Sorcer distribution archive'
    doFirst {
        println "Zipping distribution sorcer-${version} -> sorcer-${version}.zip"
    }
    //compression = Compression.GZIP // for Tar type
    baseName = "sorcer"
    destinationDir = project.buildDir
    from("${project.buildDir.path}/sorcer-${version}") {
        exclude("**/bin/webster/bin/*")
    }
    from("${project.buildDir.path}/sorcer-${version}") {
        include("**/bin/webster/bin/*")
        fileMode = 0755
    }
    into "sorcer-${version}"
    doLast {
        println "Complete"
    }
}

def sorcerDistribution = file("build/sorcer-${version}.zip")
artifacts {
    archives file: sorcerDistribution, name: 'distribution', type: 'zip', builtBy: distribution
}

publishing {
    publications {
        distribution(MavenPublication) {
            artifact sorcerDistribution
        }
    }
    repositories {
        maven { url "http://$enclaveRepo" }
    }
}
