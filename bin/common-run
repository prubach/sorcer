# -*- mode:sh -*-

##############################################################################
##                                                                          ##
##  The SORCER JVM Common Bootstrap for UN*X                                ##
##                                                                          ##
##############################################################################

PROGNAME=`basename "$0"`

#DIRNAME=`dirname "$0"`

#SCRIPT_PATH="$0"
SCRIPT_PATH=`dirname "$0"`; SCRIPT_PATH=`eval "cd \"$SCRIPT_PATH\" && pwd"`

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn ( ) {
    echo "${PROGNAME}: $*"
}

die ( ) {
    warn "$*"
    exit 1
}

earlyInit ( ) {

    # OS specific support (must be 'true' or 'false').
    cygwin=false
    msys=false
    darwin=false
    case "`uname`" in
      CYGWIN* )
        cygwin=true
        ;;
      Darwin* )
        darwin=true
        ;;
      MINGW* )
        msys=true
        ;;
    esac

    if [ "$1" = "-cp" -o "$1" = "-classpath" -o "$1" = "--classpath" ] ; then
        CP=$2
        shift 2
    fi

    # Attempt to set JAVA_HOME if it's not already set.
    if [ -z "$JAVA_HOME" ] ; then
        if $darwin ; then
            [ -z "$JAVA_HOME" -a -d "/Library/Java/Home" ] && export JAVA_HOME="/Library/Java/Home"
            [ -z "$JAVA_HOME" -a -d "/System/Library/Frameworks/JavaVM.framework/Home" ] && export JAVA_HOME="/System/Library/Frameworks/JavaVM.framework/Home"
        else
            javaExecutable="`which javac`"
            [ -z "$javaExecutable" -o "`expr \"$javaExecutable\" : '\([^ ]*\)'`" = "no" ] && die "JAVA_HOME not set and cannot find javac to deduce location, please set JAVA_HOME."
            # readlink(1) is not available as standard on Solaris 10.
            readLink=`which readlink`
            [ `expr "$readLink" : '\([^ ]*\)'` = "no" ] && die "JAVA_HOME not set and readlink not available, please set JAVA_HOME."
            javaExecutable="`readlink -f \"$javaExecutable\"`"
            javaHome="`dirname \"$javaExecutable\"`"
            javaHome=`expr "$javaHome" : '\(.*\)/bin'`
            JAVA_HOME="$javaHome"
            export JAVA_HOME

        fi
    fi

    #  For MSYS, ensure paths are in appropriate format.
    if $msys
    then
        [ -n "$JAVA_HOME" ] && JAVA_HOME=`( cd "$JAVA_HOME" ; pwd )`
    fi

    # Attempt to set SORCER_HOME if it is not already set.
    if [ -z "$SORCER_HOME" -o ! -d "$SORCER_HOME" ] ; then
        # Resolve links: $0 may be a link to Sorcer's home.
        PRG=$SCRIPT_PATH
        # Need this for relative symlinks.
        while [ -h "$PRG" ] ; do
            ls=`ls -ld "$PRG"`
            link=`expr "$ls" : '.*-> \(.*\)$'`
            if expr "$link" : '/.*' > /dev/null; then
                PRG="$link"
            else
                PRG=`dirname "$PRG"`"/$link"
            fi
        done
        SAVED="`pwd`"
        cd "`dirname \"$PRG\"`"
        SORCER_HOME="`pwd -P`"
        cd "$SAVED"
        export SORCER_HOME
    fi

    # Attempt to set SORCER_EXT if it is not already set.
    if [ -z "$SORCER_EXT" -o ! -d "$SORCER_EXT" ] ; then
        SORCER_EXT=$SORCER_HOME
        export SORCER_EXT
    fi

	JAVA_OPTS="$JAVA_OPTS -Dsorcer.env.file=$SORCER_HOME/configs/sorcer.env -Dsun.net.maxDatagramSockets=1024"

    # Set RIO_HOME if not already set
    if [ -z "$RIO_HOME" ]; then
        RIO_HOME=$SORCER_HOME/lib/rio
        export RIO_HOME
    fi

    # Convert to absolute path
    RIO_HOME=`cd "$RIO_HOME" && pwd`

    RIO_LIB=$RIO_HOME/lib
    RIO_LIB_DL=$RIO_HOME/lib-dl

    # Check for JAVA_HOME
    if [ -z "$JAVA_HOME" ] ; then
        JAVACMD=java
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi

    # -----------------------------------
    # Versions of jars used in the script
    # -----------------------------------
    rioVersion=$(getVersion v.rio)
    groovyVersion=$(getVersion v.groovy)

    # For Cygwin, ensure paths are in UNIX format before anything is touched.
    if $cygwin ; then
        [ -n "$SORCER_HOME" ] && SORCER_HOME=`cygpath --unix "$SORCER_HOME"`
        [ -n "$JAVACMD" ] && JAVACMD=`cygpath --unix "$JAVACMD"`
        [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
        [ -n "$CP" ] && CP=`cygpath --path --unix "$CP"`
    else
        if [ -n "SORCER_HOME" -a `expr "$SORCER_HOME":'\/$'` ] ; then
            SORCER_HOME=`echo $SORCER_HOME | sed -e 's/\/$//'`
        fi
    fi

    # Read sorcer.env to set the Sorcer Jar repository location
    #MVN_REPO_TMP=$(getProperty sorcer.local.repo.location)
    #echo $MVN_REPO_TMP | sed -e 's/\./\@/g' | sed "s,\${user@home},$HOME,g" > /tmp/repo_ttt
    #echo `cat /tmp/repo_ttt` | sed -e "s:@:.:g" > /tmp/repo_tt
    #MVN_REPO=`cat /tmp/repo_tt`
    #rm /tmp/repo_ttt
    #rm /tmp/repo_tt
    if [ -z "$MVN_REPO" ] ; then
        MVN_REPO="$HOME/.m2/repository"
    fi

    # the classpath to start nsh then application specific classpath is defined in nsh-start.config
    LIB_DIR=$SORCER_HOME/lib

    # Determine the Java command to use to start the JVM.
    if [ -z "$JAVACMD" ] ; then
        if [ -n "$JAVA_HOME" ] ; then
            if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
                # IBM's JDK on AIX uses strange locations for the executables
                JAVACMD="$JAVA_HOME/jre/sh/java"
            else
                JAVACMD="$JAVA_HOME/bin/java"
            fi
        else
            JAVACMD="java"
        fi
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "JAVA_HOME is not defined correctly, can not execute: $JAVACMD"
    fi
    if [ -z "$JAVA_HOME" ] ; then
        warn "JAVA_HOME environment variable is not set"
    fi

    # Increase the maximum file descriptors if we can.
    if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
        MAX_FD_LIMIT=`ulimit -H -n`
        if [ $? -eq 0 ] ; then
            if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
                MAX_FD="$MAX_FD_LIMIT"
            fi
            ulimit -n $MAX_FD
            if [ $? -ne 0 ] ; then
                warn "Could not set maximum file descriptor limit: $MAX_FD"
            fi
        else
            warn "Could not query businessSystem maximum file descriptor limit: $MAX_FD_LIMIT"
        fi
    fi

    # Setup Profiler
    useprofiler=false
    if [ "$PROFILER" != "" ] ; then
        if [ -r "$PROFILER" ] ; then
            . $PROFILER
            useprofiler=true
        else
            die "Profiler file not found: $PROFILER"
        fi
    fi

    return
}

# Check to see if path conversion is needed
toNative() {
    # Check for Cygwin
    case $OS in
        Windows*)
           toWindows "$@";;
        *) echo $* ;;
    esac
}

# Cygwin utility to convert path if running under windows
toWindows() {
    cygpath -pw "$@"
}


# Call the install script, do not assume that Groovy has been installed.
installRioToLocalRepository() {
    if [ ! -f "$SORCER_HOME/logs/install.log" ]; then
        if [ -f "$RIO_LIB/groovy-all-$groovyVersion.jar" ]; then
            groovyClasspath="-cp `toNative $RIO_LIB/groovy-all-$groovyVersion.jar`"
            ""$JAVACMD"" $groovyClasspath org.codehaus.groovy.tools.GroovyStarter --main groovy.ui.GroovyMain \
            $SORCER_HOME/configs/rio/install.groovy $JAVA_HOME $RIO_HOME
        else
            echo "The required Rio environment does not exist, it seems either that the configured or derived setting of RIO_HOME [$RIO_HOME] is invalid."
            exit 1
        fi
    fi
}

lateInit ( ) {
    # Create the final classpath. Setting a classpath using the -cp or -classpath option means not to use the
    # global classpath. Network shell behaves then the same as the java interpreter
    if [ -n "$CP" ] ; then
        CP="$CP":.
    elif [ -n "$CLASSPATH" ] ; then
        CP="$CLASSPATH":.
    else
        CP=.

    fi

    # For Darwin, use classes.jar for TOOLS_JAR
    TOOLS_JAR="$JAVA_HOME/lib/tools.jar"
    #if $darwin; then
    #    TOOLS_JAR="/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Classes/classes.jar"
    #fi

    # For Darwin, add NSH_APP_NAME to the JAVA_OPTS as -Xdock:name
    if $darwin; then
        JAVA_OPTS="$JAVA_OPTS -Xdock:name=$SORCER_APP_NAME -Xdock:icon=$SORCER_HOME/configs/shell/configs/sorcer-dock-rgb.png"
    fi

    # For Cygwin, switch paths to Windows format before running java
    if $cygwin ; then
        SORCER_HOME=`cygpath --mixed "$SORCER_HOME"`
        JAVA_HOME=`cygpath --mixed "$JAVA_HOME"`
        CP=`cygpath --path --mixed "$CP"`
        TOOLS_JAR=`cygpath --mixed "$TOOLS_JAR"`
        STARTER_CLASSPATH=`cygpath --path --mixed "$STARTER_CLASSPATH"`

        # We build the pattern for arguments to be converted via cygpath
        ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
        SEP=""
        for dir in $ROOTDIRSRAW ; do
            ROOTDIRS="$ROOTDIRS$SEP$dir"
            SEP="|"
        done
        OURCYGPATTERN="(^($ROOTDIRS))"
        # Add a user-defined pattern to the cygpath arguments
        if [ "$IGRID_CYGPATTERN" != "" ] ; then
            OURCYGPATTERN="$OURCYGPATTERN|($NSH_CYGPATTERN)"
        fi
        # Now convert the arguments - kludge to limit ourselves to /bin/sh
        i=0
        for arg in "$@" ; do
            CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
            if [ $CHECK -ne 0 ] ; then
                eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
            else
                eval `echo args$i`="\"$arg\""
            fi
            i=`expr $i + 1`
        done
        case $i in
            0) set -- ;;
            1) set -- "$args0" ;;
            2) set -- "$args0" "$args1" ;;
            3) set -- "$args0" "$args1" "$args2" ;;
            4) set -- "$args0" "$args1" "$args2" "$args3" ;;
            5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
            6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
            7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
            8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
            9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
        esac

    fi
    return
}

getVersion ( ) {
  PARAM=$1
  RESULT=`sed '/^\#/d' $SORCER_HOME/configs/versions.properties | grep $PARAM  | tail -n 1 | cut -d "=" -f2- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'`
  echo $RESULT
}

getProperty ( ) {
  PARAM=$1
  RESULT=`sed '/^\#/d' $SORCER_HOME/configs/sorcer.env | grep $PARAM  | tail -n 1 | cut -d "=" -f2- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'`
  echo $RESULT
}

createBootCp ( ) {
    if [ -f $LIB_DIR/sorcer/sos-env.jar ]; then
      # Distro version
      JINI_CLASSPATH="$LIB_DIR/jini/jsk-platform.jar:\
$LIB_DIR/jini/jsk-lib.jar:\
$LIB_DIR/river/start.jar:\
$LIB_DIR/jini-lookup/serviceui.jar:\
$LIB_DIR/commons/slf4j-api.jar:\
$LIB_DIR/commons/logback-classic.jar:\
$LIB_DIR/commons/logback-core.jar"

  BOOT_CLASSPATH="$JINI_CLASSPATH:\
$LIB_DIR/sorcer/sos-env.jar:\
$LIB_DIR/sorcer/sos-boot.jar:\
$LIB_DIR/sorcer/sos-util.jar:\
$LIB_DIR/sorcer/sos-webster.jar:\
$LIB_DIR/sorcer/sos-rio-start.jar:\
$LIB_DIR/jini/jsk-resources.jar:\
$LIB_DIR/rio/rio-platform.jar:\
$LIB_DIR/rio/rio-logging-support.jar:\
$LIB_DIR/rio/rio-start.jar:\
$LIB_DIR/rio/rio-lib.jar:\
$LIB_DIR/rio-resolver/resolver-api.jar:\
$LIB_DIR/commons/groovy-all.jar:\
$LIB_DIR/commons/guava.jar:\
$LIB_DIR/commons/google-collections.jar:\
$LIB_DIR/commons/commons-io.jar:\
$LIB_DIR/commons/commons-lang3.jar"

    else
      # MVN version
      V_SORCER=$(getVersion v.sorcer)
      if [ -z "V_SORCER" ] ; then
        V_SORCER="1.0-M3"
      fi
      V_RIO=$(getVersion v.rio)
      V_JINI=$(getVersion v.jini)
      V_BLITZ=$(getVersion v.blitz)
      V_GROOVY=$(getVersion v.groovy)
      V_PLEXUS=$(getVersion v.plexus)

      JINI_CLASSPATH="$MVN_REPO/net/jini/jsk-platform/$V_JINI/jsk-platform-$V_JINI.jar:\
$MVN_REPO/net/jini/jsk-lib/$V_JINI/jsk-lib-$V_JINI.jar:\
$MVN_REPO/org/apache/river/start/$V_JINI/start-$V_JINI.jar:\
$MVN_REPO/net/jini/lookup/serviceui/$V_JINI/serviceui-$V_JINI.jar:\
$MVN_REPO/org/slf4j/slf4j-api/1.7.5/slf4j-api-1.7.5.jar:\
$MVN_REPO/ch/qos/logback/logback-core/1.0.11/logback-core-1.0.11.jar:\
$MVN_REPO/ch/qos/logback/logback-classic/1.0.11/logback-classic-1.0.11.jar"

     BOOT_CLASSPATH="$JINI_CLASSPATH:\
$MVN_REPO/org/sorcersoft/sorcer/sos-boot/$V_SORCER/sos-boot-$V_SORCER.jar:\
$MVN_REPO/org/sorcersoft/sorcer/util-rio/$V_SORCER/util-rio-$V_SORCER.jar:\
$MVN_REPO/org/sorcersoft/sorcer/sos-util/$V_SORCER/sos-util-$V_SORCER.jar:\
$MVN_REPO/org/sorcersoft/sorcer/sos-env/$V_SORCER/sos-env-$V_SORCER.jar:\
$MVN_REPO/org/sorcersoft/sorcer/sos-webster/$V_SORCER/sos-webster-$V_SORCER.jar:\
$MVN_REPO/org/sorcersoft/sorcer/sos-rio-start/$V_SORCER/sos-rio-start-$V_SORCER.jar:\
$MVN_REPO/net/jini/jsk-resources/$V_JINI/jsk-resources-$V_JINI.jar:\
$MVN_REPO/org/rioproject/resolver/resolver-api/$V_RIO/resolver-api-$V_RIO.jar:\
$MVN_REPO/org/rioproject/rio-platform/$V_RIO/rio-platform-$V_RIO.jar:\
$MVN_REPO/org/rioproject/rio-logging-support/$V_RIO/rio-logging-support-$V_RIO.jar:\
$MVN_REPO/org/rioproject/rio-start/$V_RIO/rio-start-$V_RIO.jar:\
$MVN_REPO/org/rioproject/rio-lib/$V_RIO/rio-lib-$V_RIO.jar:\
$MVN_REPO/org/codehaus/groovy/groovy-all/$V_GROOVY/groovy-all-$V_GROOVY.jar:\
$MVN_REPO/com/google/guava/14.0.1/guava-14.0.1.jar:\
$MVN_REPO/org/apache/commons/commons-lang3/3.1/commons-lang3-3.1.jar:\
$MVN_REPO/commons-io/commons-io/2.4/commons-io-2.4.jar:\
$MVN_REPO/com/google/collections/google-collections/1.0/google-collections-1.0.jar"

    fi

    # Determine webster url

    WEBSTER_INTERFACE=$(getProperty provider.webster.interface=)
    WEBSTER_PORT=$(getProperty provider.webster.port=)

    if [ "$WEBSTER_INTERFACE"=="$${localhost}" ]; then
        WEBSTER_INTERFACE=`hostname`
    fi

    if [ ! -z "$SORCER_WEBSTER_INTERFACE" ] && [ ! -z "$SORCER_WEBSTER_PORT" ]; then
        WEBSTER_URL=http://$SORCER_WEBSTER_INTERFACE:$SORCER_WEBSTER_PORT
    else
        WEBSTER_URL=http://$WEBSTER_INTERFACE:$WEBSTER_PORT
    fi
    
    # Turn on debugging if DEBUG is set in env
    if [ -n "$DEBUG" ]; then
        JAVA_OPTS="$JAVA_OPTS -Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=8000"
    fi

}

createSorcerRioCp ( ) {
    if [ -f $LIB_DIR/sorcer/sos-env.jar ]; then
      # Distro version
      SORCER_RIO_CP="$LIB_DIR/sorcer/sos-env.jar:\
$LIB_DIR/sorcer/sos-util.jar:\
$LIB_DIR/sorcer/sos-rio-start.jar:\
$LIB_DIR/sorcer/sos-boot.jar:\
$LIB_DIR/commons/commons-lang3.jar:\
$LIB_DIR/commons/guava.jar:\
$LIB_DIR/jini/jsk-dl.jar"
    else
      # MVN version
      SORCER_RIO_CP="$MVN_REPO/org/sorcersoft/sorcer/sos-util/$V_SORCER/sos-util-$V_SORCER.jar:\
$MVN_REPO/org/sorcersoft/sorcer/sos-rio-start/$V_SORCER/sos-rio-start-$V_SORCER.jar:\
$MVN_REPO/org/sorcersoft/sorcer/sos-env/$V_SORCER/sos-env-$V_SORCER.jar:\
$MVN_REPO/org/sorcersoft/sorcer/sos-boot/$V_SORCER/sos-boot-$V_SORCER.jar:\
$MVN_REPO/org/apache/commons/commons-lang3/3.1/commons-lang3-3.1.jar:\
$MVN_REPO/com/google/guava/guava/14.0.1/guava-14.0.1.jar:\
$MVN_REPO/net/jini/jsk-dl/$V_JINI/jsk-dl-$V_JINI.jar"
    fi

    echo $SORCER_RIO_CP
}

createSorcerRioUICp ( ) {
    SORCER_RIO_CP=$(createSorcerRioCp)
    if [ -f $LIB_DIR/sorcer/sos-env.jar ]; then
        SORCER_RIOUI_CP="$SORCER_RIO_CP:$LIB_DIR/sorcer/sorcer-api.jar"
    else
        SORCER_RIOUI_CP="$SORCER_RIO_CP:$MVN_REPO/org/sorcersoft/sorcer/sorcer-api/$V_SORCER/sorcer-api-$V_SORCER.jar"
    fi
    echo $SORCER_RIOUI_CP
}

startSos ( ) {

    echo "##############################################################################"
    echo "##                       SORCER OS Booter"                                
    echo "##   SORCER_HOME: $SORCER_HOME"
    echo "##   RIO_HOME   : $RIO_HOME"
    echo "##   Webster URL: $WEBSTER_URL"
    echo "##"   
    echo "##############################################################################"
    echo " "
    # echo $BOOT_CLASSPATH

    # Start the Profiler or the JVM
    if $useprofiler ; then
        runProfiler
    else
#            -Djava.net.preferIPv4Stack=true \
        exec "$JAVACMD" $JAVA_OPTS \
            -classpath "$BOOT_CLASSPATH" \
            -Djava.security.policy="$SORCER_HOME"/configs/sorcer.policy \
            -Djava.rmi.server.RMIClassLoaderSpi=org.rioproject.rmi.ResolvingLoader \
            -Djava.protocol.handler.pkgs="net.jini.url|sorcer.util.bdb|org.rioproject.url" \
            -Dlogback.configurationFile="$SORCER_HOME"/configs/rio/logging/logback.groovy \
            -Djava.rmi.server.useCodebaseOnly=false \
            -Dwebster.tmp.dir="$SORCER_HOME"/databases \
            -Dprogram.name="$PROGNAME" \
            -Dsorcer.home="$SORCER_HOME" \
            -DRIO_HOME="$RIO_HOME" \
            -Dtools.jar="$TOOLS_JAR" \
            $STARTER_MAIN_CLASS \
            "$@"
    fi
}


startShell ( ) {
SR_CP=$(createSorcerRioCp)
#echo "SORCER RIO CP:"$SR_CP

	if [ -f $LIB_DIR/sorcer/sos-env.jar ]; then
        # Distro version
        LIB_DIR=$SORCER_HOME/lib
        SHELL_CLASSPATH="$LIB_DIR/sorcer/sos-shell.jar:\
$LIB_DIR/sorcer/sorcer-api.jar:\
$LIB_DIR/sorcer/sos-env.jar:\
$LIB_DIR/sorcer/sos-netlet.jar:\
$LIB_DIR/sorcer/sos-util.jar:\
$LIB_DIR/sorcer/sos-platform.jar:\
$LIB_DIR/sorcer/sos-webster.jar:\
$LIB_DIR/rio/rio-platform.jar:\
$LIB_DIR/rio-resolver/resolver-api.jar:\
$LIB_DIR/commons/slf4j-api.jar:\
$LIB_DIR/commons/logback-core.jar:\
$LIB_DIR/commons/logback-classic.jar:\
$LIB_DIR/commons/groovy-all.jar:\
$LIB_DIR/commons/commons-io.jar:\
$LIB_DIR/commons/plexus-utils.jar:\
$LIB_DIR/jini/jsk-platform.jar:\
$LIB_DIR/jini/jsk-lib.jar:\
$LIB_DIR/jini-lookup/serviceui.jar"
    else        
      	# MVN version
      	SHELL_CLASSPATH="$MVN_REPO/org/sorcersoft/sorcer/sos-shell/$V_SORCER/sos-shell-$V_SORCER.jar:\
$MVN_REPO/org/sorcersoft/sorcer/sorcer-api/$V_SORCER/sorcer-api-$V_SORCER.jar:\
$MVN_REPO/org/sorcersoft/sorcer/sos-env/$V_SORCER/sos-env-$V_SORCER.jar:\
$MVN_REPO/org/sorcersoft/sorcer/sos-netlet/$V_SORCER/sos-netlet-$V_SORCER.jar:\
$MVN_REPO/org/sorcersoft/sorcer/sos-util/$V_SORCER/sos-util-$V_SORCER.jar:\
$MVN_REPO/org/sorcersoft/sorcer/sos-platform/$V_SORCER/sos-platform-$V_SORCER.jar:\
$MVN_REPO/org/sorcersoft/sorcer/sos-webster/$V_SORCER/sos-webster-$V_SORCER.jar:\
$MVN_REPO/org/rioproject/rio-platform/$V_RIO/rio-platform-$V_RIO.jar:\
$MVN_REPO/org/rioproject/resolver/resolver-api/$V_RIO/resolver-api-$V_RIO.jar:\
$MVN_REPO/org/slf4j/slf4j-api/1.7.5/slf4j-api-1.7.5.jar:\
$MVN_REPO/ch/qos/logback/logback-classic/1.0.11/logback-classic-1.0.11.jar:\
$MVN_REPO/ch/qos/logback/logback-core/1.0.11/logback-core-1.0.11.jar:\
$MVN_REPO/org/codehaus/groovy/groovy-all/$V_GROOVY/groovy-all-$V_GROOVY.jar:\
$MVN_REPO/org/codehaus/plexus/plexus-utils/$V_PLEXUS/plexus-utils-$V_PLEXUS.jar:\
$MVN_REPO/net/jini/jsk-platform/$V_JINI/jsk-platform-$V_JINI.jar:\
$MVN_REPO/net/jini/jsk-lib/$V_JINI/jsk-lib-$V_JINI.jar:\
$MVN_REPO/commons-io/commons-io/2.4/commons-io-2.4.jar:\
$MVN_REPO/net/jini/lookup/serviceui/$V_JINI/serviceui-$V_JINI.jar"
    fi

    CLASS=$1
    shift
    # Start the Profiler or the JVM
    if $useprofiler ; then
        runProfiler
    else
        exec "$JAVACMD" $JAVA_OPTS \
            -classpath "$SHELL_CLASSPATH" \
            -Djava.security.policy="$SORCER_HOME"/configs/shell/policy/shell.policy \
            -Djava.rmi.server.RMIClassLoaderSpi=org.rioproject.rmi.ResolvingLoader \
            -Djava.protocol.handler.pkgs="net.jini.url|sorcer.util.bdb|org.rioproject.url" \
            -Dlogback.configurationFile="$SORCER_HOME"/configs/rio/logging/logback.groovy \
            -Djava.rmi.server.useCodebaseOnly=false \
            -Dscript.name="$SCRIPT_PATH" \
            -Dprogram.name="$PROGNAME" \
            -Dnsh.starter.config="$NSH_CONF" \
            -Dsorcer.home="$SORCER_HOME" \
            -Dtools.jar="$TOOLS_JAR" \
            $STARTER_MAIN_CLASS \
            --main $CLASS \
            --config "$NSH_CONF" \
            --classpath "$CP" \
            "$@"
    fi
}

boot_config( ) {
	STARTER_MAIN_CLASS=sorcer.boot.ServiceStarter
	startSos "$@"
}

installSorcerToLocalRepository() {
    # Installer is only needed in Distribution
    if [ -f "$LIB_DIR/sorcer/sos-env.jar" ]; then
        # Run Sorcer Installer to install sorcer jars to local repo
        # Check if marker file exists - if so installer has already been run, ignore
        if [ -f "$SORCER_HOME/logs/sorcer_jars_installed.tmp" ]; then
            if [ "$daem" = "1" ]; then
                echo "Sorcer jars already installed." > $SORCER_HOME/logs/rio-boot.log
            fi
            #else
            #    echo "Sorcer jars already installed."
            #fi
        else
            # run Rio instaler first
            installRioToLocalRepository
            if [ "$daem" = "1" ]; then
                SOS_INST_CP=$LIB_DIR/sorcer/sos-env.jar:$LIB_DIR/sorcer/sos-util.jar:$LIB_DIR/commons/slf4j-api.jar:$LIB_DIR/commons/slf4j-simple.jar:$LIB_DIR/commons/commons-io.jar:$LIB_DIR/commons/xml-apis.jar:$LIB_DIR/commons/xercesImpl.jar
                      ""$JAVACMD"" -cp $SOS_INST_CP sorcer.installer.Installer > $SORCER_HOME/logs/rio-boot.log
            else
                SOS_INST_CP=$LIB_DIR/sorcer/sos-env.jar:$LIB_DIR/sorcer/sos-util.jar:$LIB_DIR/commons/slf4j-api.jar:$LIB_DIR/commons/slf4j-simple.jar:$LIB_DIR/commons/commons-io.jar:$LIB_DIR/commons/xml-apis.jar:$LIB_DIR/commons/xercesImpl.jar
                ""$JAVACMD"" -cp $SOS_INST_CP sorcer.installer.Installer
            fi
        fi
    fi
}

earlyInit
createBootCp
lateInit
installSorcerToLocalRepository
