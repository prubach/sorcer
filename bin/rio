#!/bin/sh
#
# Copyright to the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# This script provides the command and control utility for starting
# Rio services and the Rio command line interface.


# resolve links - $0 may be a soft-link
PRG="$0"

while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`/"$link"
    fi
done

DIRNAME=`dirname "$PRG"`

. "$DIRNAME/common-run"

scriptName=`basename "$0"`
scriptPath="$scriptDir/$scriptName"
command_line=$*
if [ "$1" = "start" ]; then
    start=1
    shift
    command_line=$*
elif [ "$1" = "create-project" ]; then
    project=1
    shift
    command_line=$*
elif [ "$1" = "restart" ]; then
    start=1
    shift
    pid=$1
    shift
    echo "Killing $pid"
    kill -9 $pid
fi

# Set local variables
if [ "x$RIO_HOME" = "x" ]; then
	RIO_HOME=$SORCER_HOME/rio-$V_RIO
fi
rioVersion=$V_RIO
RIO_LIB=$RIO_HOME/lib

cygwin=
case $OS in
    Windows*)
        cygwin=1
esac

# Function to find a file
getStarterConfig() {
    service="$1"
    if [ -f "$RIO_HOME/../configs/rio/start-$service.groovy" ] ; then
	    starterConfig="$RIO_HOME/../configs/rio/start-$service.groovy"
    elif [ -f "$service" ] ; then
        starterConfig="$service"
    else
	    echo "Cannot locate expected service starter file [start-$service.groovy] in [$RIO_HOME/../configs/rio], exiting"
	    exit 1
    fi
}

##############################
# Sorcer basic jars added to classpath
SOS_CLASSPATH=$(createSorcerRioCp)
##############################



# Build the classpath for SLF4J Logging
SLF4J_CLASSPATH=$LOG_CP:$MVN_REPO/org/rioproject/rio-logging-support/$V_RIO/rio-logging-support-$V_RIO.jar

loggingConfig="-Dlogback.configurationFile=`toNative $RIO_HOME/../configs/logback.groovy`"

#DEBUG=-Dorg.rioproject.tools.webster.debug
#NETWORK=-Djava.rmi.server.hostname=130.0.0.1
if [ -z "$NET_ADDR" ] ; then
    NETWORK=""
else
    NETWORK="-Djava.rmi.server.hostname="$NET_ADDR
fi

if [ -z "$JAVA_MEM_OPTIONS" ] ; then
    JAVA_MEM_OPTIONS="-Xms8m -Xmx512m"
fi

if [ -z "$JAVA_RMI_OPTIONS" ] ; then
  #  JAVA_RMI_OPTIONS="-Dsun.rmi.transport.tcp.handshakeTimeout=180000"
    JAVA_RMI_OPTIONS=""
fi

if [ -z "$JAVA_GC_OPTIONS" ] ; then
    JAVA_GC_OPTIONS="-XX:+UseConcMarkSweepGC -XX:+AggressiveOpts -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=256m"
fi

# If the command is to start the Rio services, invoke the ServiceStarter
# Otherwise invoke the CLI
if [ "$start" = "1" ]; then
    if [ -z "$RIO_NATIVE_DIR" ] ; then
        RIO_NATIVE_DIR="`toNative $RIO_LIB/native`"
    fi
    
    if [ -d $RIO_NATIVE_DIR ]; then
        # Check for running on OS/X
        opSys=`uname -s`
        if [ $opSys = "Darwin" ] ; then
            export DYLD_LIBRARY_PATH=$RIO_NATIVE_DIR:$DYLD_LIBRARY_PATH
            libpath="-Djava.library.path=$DYLD_LIBRARY_PATH"
        else
            if [ "$cygwin" = "1" ] ; then
                libpath="-Djava.library.path=$RIO_NATIVE_DIR"
            else
		        # do export the "sh" way in case the system does not have bash as /bin/sh
                export LD_LIBRARY_PATH; LD_LIBRARY_PATH=$RIO_NATIVE_DIR:$LD_LIBRARY_PATH
                libpath="-Djava.library.path=$RIO_NATIVE_DIR"
            fi
        fi
        USER_OPTS="-DRIO_NATIVE_DIR=$RIO_NATIVE_DIR $USER_OPTS"
    fi
    ##
    classpath="-cp `toNative $RIO_LIB/rio-start-$rioVersion.jar:$JAVA_HOME/lib/tools.jar:$RIO_LIB/groovy-all-$groovyVersion.jar:$SLF4J_CLASSPATH:$SOS_CLASSPATH`"

#    echo "classpath to native:"$classpath
    agentpath="-javaagent:`toNative $RIO_LIB/rio-start-$rioVersion.jar`"
    launchTarget=org.rioproject.start.ServiceStarter
    if [ -z "$1" ] ; then
        echo "A service to start is required, exiting"
        exit 1
    else
        starter_arg=$1
        getStarterConfig $1
	    echo "INFO  $(date +%T) starter config [$starterConfig]"
        shift
        command_line=$*
    fi
    ARGS="$starter_arg $command_line"
    # -------------------
    # System properties that change how Rio operates
    #
    # o To set a range of ports for the the system to use, add the following system property
    #     -Dorg.rioproject.portRange="startRange-endRange"
    #
    # o To set common locators that all services should use, add the following system property
    #     -Dorg.rioproject.locators="jini://localhost:10500" \
    # -------------------
        ""$JAVACMD"" -server $JAVA_MEM_OPTIONS $JAVA_RMI_OPTIONS $JAVA_GC_OPTIONS \
        -XX:+HeapDumpOnOutOfMemoryError \
        -XX:OnOutOfMemoryError="$RIO_HOME/../bin/rio restart %p $service" \
        -XX:HeapDumpPath=$RIO_HOME/../logs/ \
        $classpath $agentpath $libpath $RIO_OPTS \
        -Djava.security.policy=$RIO_HOME/../configs/rio/rio.policy \
        '-Djava.protocol.handler.pkgs=net.jini.url|org.rioproject.url' \
        $loggingConfig \
        -Dorg.rioproject.service=$service \
        -Djava.rmi.server.useCodebaseOnly=false \
        -DRIO_HOME=$RIO_HOME \
        -DRIO_LOG_DIR=$RIO_HOME/../logs/ \
        -Drio.script.mainClass="$launchTarget" \
        $USER_OPTS \
        $NETWORK $JAVA_OPTS $launchTarget $starterConfig $command_line
elif [ "$project" = "1" ] ;then
    echo "Create project"
    mvn archetype:generate \
    -DarchetypeGroupId=org.rioproject \
    -DarchetypeArtifactId=rio-archetype \
    -DarchetypeRepository=http://www.rio-project.org/maven2 \
    -DarchetypeVersion=5.1
else
    # Set system properties
    PROPS="-DRIO_HOME=$RIO_HOME"
    cliExt="$RIO_HOME/../configs/rio/tools.groovy"
    launchTarget=org.rioproject.tools.cli.CLI
    #classpath="-cp `toNative $RIO_LIB/rio-cli-$rioVersion.jar:$RIO_LIB/rio-start-$rioVersion.jar:$RIO_LIB/rio-platform-$rioVersion.jar:$JAVA_HOME/lib/tools.jar:$RIO_LIB/groovy-all-$groovyVersion.jar:$SLF4J_CLASSPATH:$SOS_CLASSPATH`"
    classpath="-cp `toNative $RIO_LIB/rio-cli-$rioVersion.jar:$SLF4J_CLASSPATH:$SOS_CLASSPATH`"
#    echo "RioCP:"$classpath
    "$JAVACMD" $classpath $JAVA_MEM_OPTIONS  $RIO_OPTS \
        -Djava.security.policy=$RIO_HOME/../configs/rio/rio.policy \
        '-Djava.protocol.handler.pkgs=net.jini.url|org.rioproject.url' \
        -Djava.rmi.server.useCodebaseOnly=false \
        $loggingConfig \
        $PROPS \
        $NETWORK \
        $JAVA_OPTS \
        $USER_OPTS \
        $launchTarget $cliExt $command_line
fi
