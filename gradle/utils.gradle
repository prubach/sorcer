/*
 * Copyright to the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: "maven"

/*
 * Declares utilities for starting Sorcer using sorcer boot, as we as starting Sorcer with Rio
 */

/*
 * Start Sorcer only with http
 */
task bootSorcer(type: Exec) {
    description = 'Starts SORCER Operating System Services.'
    def args = []
    if(System.properties['os.name'].contains("Windows")) {
        args << "cmd.exe"
        args << "/C"
    }
    args << "${file("${sorcerDistHome}").path}/bin/sorcer-boot"
    args << "-M force-fork"
    args << "-w start"
    args << "-P"
    args << "sorcer"
    commandLine args
}
bootSorcer.onlyIf {
    def jps = jps().execute()
    !jps.text.contains("boot-sorcer")
}

/*
 * Start Sorcer using Rio
 */
task bootSorcerRio(type: Exec) {
    description = 'Starts SORCER OS Services with Rio services for service provisioning.'
    def args = []
    if(System.properties['os.name'].contains("Windows")) {
        args << "cmd.exe"
        args << "/C"
    }
    args << "${file("${sorcerDistHome}").path}/bin/sorcer-boot"
    args << "-M force-fork"
    args << "-w start"
    args << "-P"
    args << "mix"
    def env = []
    if(System.getProperty("maxMem")!=null) {
        environment "MAX_MEM": System.getProperty("maxMem")
    }
    commandLine args
}

bootSorcerRio.onlyIf {
    File sorcerDist = file(sorcerDistHome)
    if(!sorcerDist.exists()) {
        println "Sorcer distribution not found, cannot start Sorcer"
        return false
    }
    def jps = jps().execute()
    !jps.text.contains("start-monitor")
}

/*
 * Destroy Sorcer and Rio
 */
task terminateSorcerRio(type: Exec) {
    description = 'Halts SORCER OS Services and Rio services.'
    def args = []
    if(System.properties['os.name'].contains("Windows")) {
        args << "cmd.exe"
        args << "/C"
    }
    args << "ant"
    args << "-f"
    args << "${file("${sorcerDistHome}").path}/bin/rio/destroy-sorcer-rio.xml"
    commandLine args
}

/*
 * Start a browser
 */
task browser(type: Exec) {
    description = 'Starts the SORCER service browser.'
    def args = []
    if(System.properties['os.name'].contains("Windows")) {
        args << "cmd.exe"
        args << "/C"
    }
    args << "${file("${sorcerDistHome}").path}/bin/sorcer-browser"
    args << "&"
    commandLine args
}
//browser.onlyIf {
//    def jps = jps().execute()
//    !jps.text.contains("sorcer-browser")
//}

/*
 * Start the Rio UI
 */
task rioUI(type: Exec) {
    description = 'Starts a user agent (GUI) for Rio service provisioning.'
    def args = []
    if(System.properties['os.name'].contains("Windows")) {
        args << "cmd.exe"
        args << "/C"
    }
    args << "ant"
    args << "-f"
    args << "${file("${sorcerDistHome}").path}/bin/rio/rio-ui.xml"
    args << "spawn"
    commandLine args
}
rioUI.onlyIf {
    def jps = jps().execute()
    !jps.text.contains("rio-ui")
}

def jps() {
    StringBuilder s = new StringBuilder()
    if(System.properties['os.name'].contains("Windows")) {
        s.append("cmd.exe /C ")
    }
    s.append("jps -lm")
    s.toString()
}
