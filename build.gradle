allprojects {
    group = 'org.sorcersoft.sorcer'
    version = '1.1-SNAPSHOT'
}

buildscript {
    String hostName = InetAddress.getLocalHost().getHostName()
    String address = InetAddress.getLocalHost().getHostAddress()
    println "hostName: ${hostName}, address: ${address}"
    ext {
        engGradleExtVersion = "2.0"
        onEnclave = (hostName.endsWith("wpafb.af.mil") || address.startsWith("10.131"))
    }
    repositories {
        mavenLocal()
        if(!onEnclave) {
            maven { url "http://www.rio-project.org/maven2" }
            mavenCentral()
        } else {
            maven { url "http://10.131.7.138:7001" }
        }
    }
    dependencies {
        classpath group: 'mil.afrl.mstc.open.tools', name: 'gradle-ext', version: engGradleExtVersion
    }
}

ext {
    enclaveRepo = "10.131.7.138:7001"
    enclave = InetAddress.getLocalHost().getHostAddress().startsWith("10.131")
    intTests = false
}

apply from: file('gradle/libraries.gradle')
apply from: file("gradle/utils.gradle")
apply from: file("gradle/testProperties.gradle")

import mil.afrl.mstc.open.tools.configbuilder.ConfigBuilder

subprojects {
    if (project.name != "examples" && project.name != "sorcer-int-tests") {
        apply plugin: "maven"
        apply plugin: "maven-publish"

        if (project.name != "distribution") {
            apply plugin: "java"
            sourceCompatibility = 1.6
            targetCompatibility = 1.6
            // apply from: file("${rootProject.projectDir.path}/gradle/bootme.gradle")

            // The following parts configurations and sourceSets are required to make the "provided" scope work
            configurations {
                provided
            }
            sourceSets {
                main.compileClasspath += configurations.provided
                test.compileClasspath += configurations.provided
                test.runtimeClasspath += configurations.provided
            }
            // end of "provided" scope

            publishing {
                publications {
                    mavenJava(MavenPublication) {
                        from components.java
                    }
                }
            }
            // Add poms to jars
            jar.dependsOn('generatePomFileForMavenJavaPublication')

            jar {
                into("META-INF/maven/$project.group/$project.name") {
                    from "build/publications/mavenJava/pom-default.xml"
                    rename ".*", "pom.xml"
                }
            }
            // end of add poms to jars

            /*configure(subprojects.findAll {it.name.endsWith("prv")}) {
                apply plugin: 'configbuilder'
                apply plugin: 'java'
                //apply plugin: 'startme'
                //apply plugin: 'stopme'

                tasks['processResources'].dependsOn {
                    tasks.withType(ConfigBuilder.class)
                }
            } */

            test {
                useJUnit {
                 //   if (!intTests)
                 //       excludeCategories 'sorcer.junit.SorcerClient'
                }
            }
        }

        repositories {
            mavenLocal()

            maven { url "http://mvn.sorcersoft.com/content/groups/public/" }
            maven { url "http://repo.maven.apache.org/maven2" }
            maven { url "http://mvn.sorcersoft.com/content/groups/public" }
        }




    }

}

import mil.afrl.mstc.open.tools.stopme.Stopper
/*
 * Destroy Sorcer and Rio
 */
task terminateSorcer() {
    Stopper.stop("Sorcer", true)
}

task allTests(type: TestReport, dependsOn: "bootSorcerRio") {
    description = 'Aggregates all tests, view them in build/reports/tests/index.html.'
    destinationDir = file("$buildDir/reports/allTests")
    intTests = true
    project.subprojects { project ->
        tasks.withType(Test) {
            ignoreFailures true
            reportOn it
        }
    }
    doLast {
        println "\nThe allTests task is complete. See the results at: file://${destinationDir.path}/index.html"
    }

    //finalizedBy("terminateSorcerRio")
}
